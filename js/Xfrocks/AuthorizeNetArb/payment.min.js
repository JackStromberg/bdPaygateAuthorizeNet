((t,e)=>{"use strict";XF.AuthorizeNetArb_PayForm=XF.Element.newHandler({options:{apiLoginId:null,hiddenInputSelector:"[name=opaque_data]",cardNotAcceptedSelector:null,acceptedCards:null,phrasePreparing:null,phraseProcessing:null,progressTextSelector:null,publicClientKey:null},xhr:null,init:function(){this.options.apiLoginId?this.options.publicClientKey?(this.hiddenInput=this.target.querySelector(this.options.hiddenInputSelector),this.hiddenInput?(this.progressText=this.target.querySelector(this.options.progressTextSelector),this.cardNotAcceptedText=this.target.querySelector(this.options.cardNotAcceptedSelector),this.options.acceptedCards.length>0&&XF.on(this.target.querySelector('input[rel="card-number"]'),"change",this.validateCardNumber.bind(this)),XF.on(this.target,"ajax-submit:before",this.onBeforeAjaxSubmit.bind(this)),XF.on(this.target,"ajax-submit:always",this.onBeforeAjaxAlways.bind(this)),XF.on(this.target,"submit",this.onSubmit.bind(this))):console.error("Form must contain a data-hidden-input-selector attribute.")):console.error("Form must contain a data-public-client-key attribute."):console.error("Form must contain a data-api-login-id attribute.")},validateCardNumber:function(t){const e={amex:/^3[47][0-9]{13}$/,diners_club:/^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,discover:/^6(?:011|5[0-9]{2})[0-9]{12}$/,enroute:/^(?:2014|2149)\d{11}$/,jcb:/^(?:2131|1800|35\d{3})\d{11}$/,mastercard:/^5[1-5][0-9]{14}$/,visa:/^4[0-9]{12}(?:[0-9]{3})?$/},r=Object.keys(e).find((r=>e[r].test(t.target.value)));if(r&&this.options.acceptedCards.includes(r))t.target.style.borderColor="",this.cardNotAcceptedText.textContent="";else{t.target.style.borderColor="red",console.log(XF.phrases);const e={amex:XF.phrase("amex"),diners_club:XF.phrase("diners_club"),discover:XF.phrase("discover"),enroute:XF.phrase("enroute"),jcb:XF.phrase("jcb"),mastercard:XF.phrase("mastercard"),visa:XF.phrase("visa")}[r]||XF.phrase("card_unsupported");this.cardNotAcceptedText.textContent=XF.phrase("not_accepted",{"{friendlyCardType}":e})}},onBeforeAjaxSubmit:function(t,e){if(this.hiddenInput.value)return this.progressText.textContent=this.options.phraseProcessing,!0;t.preventDefault()},onBeforeAjaxAlways:function(){this.hiddenInput.value="",this.progressText.textContent=""},onSubmit:function(t){if(this.hiddenInput.value)return!0;t.preventDefault();const e={},r={},s={},n=(t,e,r=e)=>{const s=this.target.querySelector(`input[rel="${r}"]`);let n=s?s.value:null;if(!n){const t=this.target.querySelector(`select[rel="${r}"]`);n=t?t.value:null}n&&(t[e]=n)};return n(s,"cardNumber","card-number"),n(s,"month"),n(s,"year"),n(s,"cardCode","card-code"),e.cardData=s,r.apiLoginID=this.options.apiLoginId,r.clientKey=this.options.publicClientKey,e.authData=r,this._callAjaxSubmit("disableButtons"),this.progressText.textContent=this.options.phrasePreparing,Accept.dispatchData(e,this.onAcceptJsResponse.bind(this)),!1},onAcceptJsResponse:function(t){if(this.progressText.textContent="",this._callAjaxSubmit("enableButtons"),"Error"!==t.messages?.resultCode)this.hiddenInput.value=JSON.stringify(t.opaqueData),setTimeout((()=>{this._callAjaxSubmit("submit")}),0);else{const{messages:e}=t,r=e.message.map((t=>(console.error(`${t.code}: ${t.text}`),t.text)));XF.alert(r.join("\r\n"))}},_callAjaxSubmit:function(t,e){const r=this.target.dataset.xfElementHandlers?JSON.parse(this.target.dataset.xfElementHandlers):null;if(!r||!r["ajax-submit"])return;const s=r["ajax-submit"];return s[t].apply(s,e)}}),XF.Element.register("authorizenet-payment-form","XF.AuthorizeNetArb_PayForm")})(window,document);